input {

    file {
        path => "/home/capostol/Documents/logstash-7.1.1/event-data/java_access.log"
        start_position => "beginning"
    }

    file {
        path => "/home/capostol/Documents/logstash-7.1.1/event-data/java_errors.log"
        start_position => "beginning"

        codec => multiline {
            pattern => "^%{CATALINA_DATESTAMP}"
            negate => true
            what => "previous"
            auto_flush_interval => 5
        }
    }
}


filter {
    if [headers][request_path] =~ "error" or [path] =~ "errors" {
 		mutate {
 			replace => { type => "error" }
 		}

 		grok {
            match => { "message" => "%{TIMESTAMP_ISO8601:[@metadata][timestamp]} *%{LOGLEVEL:level} \[%{DATA:application},%{DATA:traceId},%{DATA:spanId},%{DATA:zipkin}\]" }
        }




 	} else {
 	    mutate {
            replace => { type => "access" }
        }

        grok {
            match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} *%{LOGLEVEL:level} \[%{DATA:application},%{DATA:traceId},%{DATA:spanId},%{DATA:zipkin}\] %{DATA:pid} --- *\[%{DATA:thread}] %{JAVACLASS:class} *: %{GREEDYDATA:log}" ]
        }

        #Used to convert or remove extra lines or change the type of the field
         mutate {
            convert => {
                "pid" => "integer"
            }
        }
 	}
}

output {
  # if [type] == "access" {
          # elasticsearch {
              # hosts => [ "localhost:9200" ]
             #  #index => "%{type}-%{+YYYY.MM.dd}"
              # document_type => "default"
              # http_compression => true
          # }
  # } else {
       stdout {
           codec => rubydebug {
               metadata => true
           }
       }
   #}
}